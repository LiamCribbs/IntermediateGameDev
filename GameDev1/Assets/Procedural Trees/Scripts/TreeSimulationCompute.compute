// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Particle
{
    uint seed;
    float2 position;
    int drawnX;
    int drawnY;
    float2 direction;
    float initialAngle;
    float targetAngle;
    float speed;
    int type;
    int age;
    int lifetime;
    float3 currentColor;
    float3 startColor;
    float3 endColor;
    bool canBranch;
};

const float EPSILON = 1e-10;

uint seed;
uint iteration;

bool3 setColorByParticleLife;
float3 colorJitterBranch;
float3 colorJitterTrunk;
float3 colorJitterLeaf;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<Particle> cells;

//uint random(uint state)
//{
//    state ^= 2747636419u;
//    state *= 2654435769u;
//    state ^= state >> 16;
//    state *= 2654435769u;
//    state ^= state >> 16;
//    state *= 2654435769u;
//    return state;
//}

uint random(out uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float randomValue(uint rand)
{
    return rand / 4294967295.0;
}

float3 HUEtoRGB(in float hue)
{
    float3 rgb = abs(hue * 6. - float3(3, 2, 4)) * float3(1, -1, -1) + float3(-1, 2, 2);
    return clamp(rgb, 0., 1.);
}

float3 RGBtoHCV(in float3 rgb)
{
    // RGB [0..1] to Hue-Chroma-Value [0..1]
    // Based on work by Sam Hocevar and Emil Persson
    float4 p = (rgb.g < rgb.b) ? float4(rgb.bg, -1., 2. / 3.) : float4(rgb.gb, 0., -1. / 3.);
    float4 q = (rgb.r < p.x) ? float4(p.xyw, rgb.r) : float4(rgb.r, p.yzx);
    float c = q.x - min(q.w, q.y);
    float h = abs((q.w - q.y) / (6. * c + EPSILON) + q.z);
    return float3(h, c, q.x);
}

float3 HSVtoRGB(in float3 hsv)
{
    float3 rgb = HUEtoRGB(hsv.x);
    return ((rgb - 1.) * hsv.y + 1.) * hsv.z;
}

float3 RGBtoHSV(in float3 rgb)
{
    // RGB [0..1] to Hue-Saturation-Value [0..1]
    float3 hcv = RGBtoHCV(rgb);
    float s = hcv.y / (hcv.z + EPSILON);
    return float3(hcv.x, s, hcv.z);
}

float3 jitterColor(float3 color, float3 jitter, int i)
{
    float3 hsv = RGBtoHSV(color);
    uint rand = i * iteration * seed;
    hsv.r += randomValue(random(rand)) * jitter.r * 2 + -jitter.r;
    hsv.g += randomValue(random(rand)) * jitter.g * 2 + -jitter.g;
    hsv.b += randomValue(random(rand)) * jitter.b * 2 + -jitter.b;

    return HSVtoRGB(hsv);
}

Particle simulateTrunkCell(Particle cell, int i)
{
    cell.position += cell.direction * cell.speed;

    cell.drawnX = (int) cell.position.x;
    cell.drawnY = (int) cell.position.y;

    if (!setColorByParticleLife.x)
    {
        cell.startColor = lerp(cell.startColor, cell.endColor, cell.lifetime == 0 ? 0 : float(cell.age) / cell.lifetime);
    }

    cell.startColor = jitterColor(cell.startColor, colorJitterTrunk, i);

    cell.age++;

    return cell;
}

Particle simulateBranchCell(Particle cell, int i)
{
    cell.position += cell.direction * cell.speed;

    cell.drawnX = (int) cell.position.x;
    cell.drawnY = (int) cell.position.y;

    if (!setColorByParticleLife.y)
    {
        cell.startColor = lerp(cell.startColor, cell.endColor, cell.lifetime == 0 ? 0 : (float) cell.age / cell.lifetime);
    }

    cell.startColor = jitterColor(cell.startColor, colorJitterBranch, i);

    cell.age++;

    return cell;
}

Particle simulateLeafCell(Particle cell, int i)
{
    cell.position += cell.direction * cell.speed;

    cell.drawnX = (int) cell.position.x;
    cell.drawnY = (int) cell.position.y;

    if (!setColorByParticleLife.z)
    {
        cell.startColor = lerp(cell.startColor, cell.endColor, cell.lifetime == 0 ? 0 : (float) cell.age / cell.lifetime);
    }

    cell.startColor = jitterColor(cell.startColor, colorJitterLeaf, i);

    cell.age++;

    return cell;
}

[numthreads(4,4,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}